An√°lise do Fluxo e Orienta√ß√µes para o Desenvolvedor
O fluxo que voc√™ prop√¥s √© perfeito para a arquitetura do seu projeto, onde a gest√£o de dados √© feita no localStorage. A funcionalidade de "Restaurar Backup" ir√° substituir os dados atuais no navegador por um arquivo de backup (produtos.json) que o administrador ir√° carregar.

A sua l√≥gica de sincroniza√ß√£o j√° deve ter as fun√ß√µes de importa√ß√£o de dados, ent√£o o foco √© apenas garantir que o bot√£o no admin.html chame a fun√ß√£o correta no sync-manager.js.

1. Verifica√ß√£o e Modifica√ß√£o do admin.html
O seu HTML j√° est√° configurado para o upload. O c√≥digo a seguir est√° correto e n√£o precisa de altera√ß√µes:

HTML

<button onclick="document.getElementById('import-file').click()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition">
    <i class="fas fa-upload mr-2"></i>Restaurar Backup
</button>
<input type="file" id="import-file" accept=".json" style="display: none;" onchange="importData(event)">
O atributo onchange="importData(event)" √© a chave. Ele j√° chama a fun√ß√£o que precisamos. O que faremos √© garantir que essa fun√ß√£o, que voc√™ chamou de importData, existe e faz o que √© esperado no sync-manager.js.

2. Implementa√ß√£o no sync-manager.js
A fun√ß√£o importData(event) precisa ser criada (ou revisada) para ler o arquivo e salvar o conte√∫do no localStorage.

Aqui est√° a implementa√ß√£o completa que voc√™ deve adicionar ou verificar no seu arquivo js/modules/sync-manager.js.

Lembrete: Se voc√™ tiver um arquivo chamado data-manager.js que lida com o localStorage, a l√≥gica de importa√ß√£o pode estar l√°. Certifique-se de que o caminho dos arquivos est√° correto.

JavaScript

// js/modules/sync-manager.js

// Certifique-se de que o DataManager j√° foi carregado e est√° dispon√≠vel
// ex: const dataManager = new DataManager();

/**
 * Lida com o upload de um arquivo de backup para restaurar os produtos.
 * @param {Event} event O evento de mudan√ßa do input de arquivo.
 */
function importData(event) {
    console.log('üîÑ Restaurar Backup: Processo iniciado.');

    const file = event.target.files[0];
    if (!file) {
        alert('Nenhum arquivo selecionado.');
        return;
    }

    // Verifica o tipo de arquivo para garantir que √© um JSON
    if (file.type !== 'application/json') {
        alert('Por favor, selecione um arquivo JSON v√°lido.');
        return;
    }

    const reader = new FileReader();

    // Quando o arquivo for lido
    reader.onload = function(e) {
        try {
            // Analisa o conte√∫do do arquivo como JSON
            const data = JSON.parse(e.target.result);
            console.log('‚úÖ Arquivo JSON lido com sucesso.');

            // Verifica se os dados do backup s√£o v√°lidos
            if (data.products && Array.isArray(data.products)) {
                // Chama a fun√ß√£o para salvar os dados no localStorage
                window.dataManager.saveAllData(data);
                
                // Dispara um evento para notificar outras partes do sistema
                const event = new CustomEvent('productsUpdated', { detail: { count: data.products.length } });
                window.dispatchEvent(event);

                console.log(`‚úÖ Backup restaurado com sucesso. ${data.products.length} produtos carregados.`);
                alert('Backup restaurado com sucesso! Os dados foram atualizados no sistema local.');
                
                // Recarrega a tabela de produtos no painel
                if (window.renderProductsTable) {
                    window.renderProductsTable(data.products);
                }

            } else {
                alert('O arquivo JSON n√£o parece ser um backup de produtos v√°lido. Formato inesperado.');
            }
        } catch (error) {
            console.error('‚ùå Erro ao processar o arquivo JSON:', error);
            alert('Erro ao processar o arquivo. Verifique se √© um arquivo JSON v√°lido.');
        }
    };

    // L√™ o conte√∫do do arquivo como texto
    reader.readAsText(file);
}

// Torna a fun√ß√£o global para que o `onchange` do HTML possa encontr√°-la
window.importData = importData;
3. Orienta√ß√µes para a Execu√ß√£o
Edite o Arquivo: Abra o arquivo js/modules/sync-manager.js (ou data-manager.js, dependendo de onde voc√™ lida com os dados) e adicione a fun√ß√£o importData no local correto, garantindo que ela tenha acesso ao window.dataManager.

Verifica√ß√£o: Certifique-se de que a fun√ß√£o saveAllData() existe no seu data-manager.js. Ela deve ser respons√°vel por pegar o objeto de dados (que inclui os produtos, layouts, etc.) e salv√°-lo inteiro no localStorage.

Teste o Fluxo:

Abra o admin.html.

Clique em "Restaurar Backup".

Selecione um arquivo .json v√°lido que contenha a estrutura de produtos.

Verifique o console do navegador para os logs de depura√ß√£o.

A tabela de produtos deve ser atualizada com os dados do arquivo de backup.