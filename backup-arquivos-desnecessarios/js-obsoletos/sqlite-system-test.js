/**
 * Sistema de Teste e Diagn√≥stico SQLite
 * 
 * Este script verifica o funcionamento completo do sistema SQLite
 * e fornece diagn√≥sticos em tempo real.
 */

class SQLiteSystemTest {
    constructor() {
        this.testResults = {};
        console.log('üß™ Sistema de Teste SQLite iniciado');
        
        // Aguardar o DOM carregar para executar testes
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.runAllTests());
        } else {
            setTimeout(() => this.runAllTests(), 1000);
        }
    }
    
    async runAllTests() {
        console.log('üöÄ === INICIANDO TESTES COMPLETOS ===');
        
        try {
            // Teste 1: Carregamento de depend√™ncias
            await this.testDependencies();
            
            // Teste 2: Inicializa√ß√£o SQLite
            await this.testSQLiteInitialization();
            
            // Teste 3: Opera√ß√µes b√°sicas
            await this.testBasicOperations();
            
            // Teste 4: Integra√ß√£o DataManager
            await this.testDataManagerIntegration();
            
            // Teste 5: Persist√™ncia
            await this.testPersistence();
            
            // Relat√≥rio final
            this.generateReport();
            
        } catch (error) {
            console.error('‚ùå Erro durante os testes:', error);
        }
    }
    
    async testDependencies() {
        console.log('üì¶ Testando depend√™ncias...');
        
        const tests = {
            'SQL.js': () => typeof initSqlJs !== 'undefined',
            'SQLiteManager class': () => typeof SQLiteManager !== 'undefined',
            'DataManager class': () => typeof DataManager !== 'undefined',
            'RobustInitializer': () => typeof window.sqliteRobustInitializer !== 'undefined'
        };
        
        this.testResults.dependencies = {};
        
        for (const [name, test] of Object.entries(tests)) {
            const result = test();
            this.testResults.dependencies[name] = result;
            console.log(`  ${result ? '‚úÖ' : '‚ùå'} ${name}: ${result ? 'OK' : 'FALHOU'}`);
        }
    }
    
    async testSQLiteInitialization() {
        console.log('üîß Testando inicializa√ß√£o SQLite...');
        
        this.testResults.initialization = {};
        
        // Aguardar inicializa√ß√£o
        try {
            if (window.sqliteRobustInitializer) {
                await Promise.race([
                    window.sqliteRobustInitializer.waitForReady(),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 10000))
                ]);
                
                this.testResults.initialization.timeout = false;
                console.log('  ‚úÖ Inicializa√ß√£o conclu√≠da dentro do tempo limite');
            } else {
                this.testResults.initialization.timeout = true;
                console.log('  ‚ùå RobustInitializer n√£o dispon√≠vel');
                return;
            }
        } catch (error) {
            this.testResults.initialization.timeout = true;
            console.log('  ‚ùå Timeout na inicializa√ß√£o (10s)');
            return;
        }
        
        // Verificar estado final
        const sqliteExists = !!window.sqliteManager;
        const dbExists = !!(window.sqliteManager && window.sqliteManager.db);
        const readyFlag = !!window.sqliteReady;
        
        this.testResults.initialization.sqliteManager = sqliteExists;
        this.testResults.initialization.database = dbExists;
        this.testResults.initialization.readyFlag = readyFlag;
        
        console.log(`  ${sqliteExists ? '‚úÖ' : '‚ùå'} SQLiteManager: ${sqliteExists ? 'Criado' : 'N√£o encontrado'}`);
        console.log(`  ${dbExists ? '‚úÖ' : '‚ùå'} Database: ${dbExists ? 'Inicializado' : 'N√£o inicializado'}`);
        console.log(`  ${readyFlag ? '‚úÖ' : '‚ùå'} Ready Flag: ${readyFlag ? 'True' : 'False'}`);
    }
    
    async testBasicOperations() {
        console.log('‚öôÔ∏è Testando opera√ß√µes b√°sicas...');
        
        this.testResults.operations = {};
        
        if (!window.sqliteManager || !window.sqliteManager.db) {
            console.log('  ‚ö†Ô∏è SQLite n√£o dispon√≠vel - pulando testes de opera√ß√£o');
            this.testResults.operations.skipped = true;
            return;
        }
        
        try {
            // Teste de consulta
            const products = window.sqliteManager.getProducts();
            this.testResults.operations.query = Array.isArray(products);
            console.log(`  ${Array.isArray(products) ? '‚úÖ' : '‚ùå'} Query produtos: ${Array.isArray(products) ? products.length + ' itens' : 'Falhou'}`);
            
            // Teste de inser√ß√£o (se n√£o h√° produtos)
            if (products.length === 0) {
                const testProduct = {
                    name: 'Teste SQLite',
                    price: 1.00,
                    stock: 1,
                    category: 'teste',
                    description: 'Produto de teste do sistema SQLite'
                };
                
                const inserted = window.sqliteManager.addProduct(testProduct);
                this.testResults.operations.insert = inserted;
                console.log(`  ${inserted ? '‚úÖ' : '‚ùå'} Insert teste: ${inserted ? 'Sucesso' : 'Falhou'}`);
                
                if (inserted) {
                    // Verificar se foi inserido
                    const updatedProducts = window.sqliteManager.getProducts();
                    const found = updatedProducts.find(p => p.name === 'Teste SQLite');
                    this.testResults.operations.verify = !!found;
                    console.log(`  ${found ? '‚úÖ' : '‚ùå'} Verifica√ß√£o: ${found ? 'Produto encontrado' : 'Produto n√£o encontrado'}`);
                }
            } else {
                console.log('  ‚ÑπÔ∏è Produtos existentes - pulando teste de inser√ß√£o');
                this.testResults.operations.insert = 'skipped';
            }
            
        } catch (error) {
            console.error('  ‚ùå Erro nas opera√ß√µes b√°sicas:', error);
            this.testResults.operations.error = error.message;
        }
    }
    
    async testDataManagerIntegration() {
        console.log('üîó Testando integra√ß√£o DataManager...');
        
        this.testResults.integration = {};
        
        if (!window.dataManager) {
            console.log('  ‚ùå DataManager n√£o dispon√≠vel');
            this.testResults.integration.dataManagerMissing = true;
            return;
        }
        
        try {
            // Testar m√©todo saveToSQLiteIfAvailable
            const hasMethod = typeof window.dataManager.saveToSQLiteIfAvailable === 'function';
            this.testResults.integration.methodExists = hasMethod;
            console.log(`  ${hasMethod ? '‚úÖ' : '‚ùå'} M√©todo saveToSQLiteIfAvailable: ${hasMethod ? 'Existe' : 'N√£o encontrado'}`);
            
            // Testar produtos do DataManager
            const dmProducts = window.dataManager.getProducts();
            this.testResults.integration.dataManagerProducts = dmProducts.length;
            console.log(`  ‚úÖ Produtos DataManager: ${dmProducts.length} itens`);
            
            // Comparar com SQLite se dispon√≠vel
            if (window.sqliteManager) {
                const sqliteProducts = window.sqliteManager.getProducts();
                this.testResults.integration.productSync = dmProducts.length === sqliteProducts.length;
                console.log(`  ${dmProducts.length === sqliteProducts.length ? '‚úÖ' : '‚ö†Ô∏è'} Sincroniza√ß√£o: DM=${dmProducts.length}, SQLite=${sqliteProducts.length}`);
            }
            
        } catch (error) {
            console.error('  ‚ùå Erro na integra√ß√£o:', error);
            this.testResults.integration.error = error.message;
        }
    }
    
    async testPersistence() {
        console.log('üíæ Testando persist√™ncia...');
        
        this.testResults.persistence = {};
        
        try {
            // Verificar localStorage
            const localData = localStorage.getItem('granjaRecantoFelizData');
            const hasLocalStorage = !!localData;
            this.testResults.persistence.localStorage = hasLocalStorage;
            console.log(`  ${hasLocalStorage ? '‚úÖ' : '‚ùå'} LocalStorage: ${hasLocalStorage ? 'Dados encontrados' : 'Vazio'}`);
            
            if (hasLocalStorage) {
                try {
                    const parsed = JSON.parse(localData);
                    const productCount = parsed.products?.length || 0;
                    this.testResults.persistence.productCount = productCount;
                    console.log(`  ‚úÖ Produtos persistidos: ${productCount} itens`);
                    console.log(`  ‚úÖ √öltima atualiza√ß√£o: ${parsed.lastUpdate || 'N/A'}`);
                } catch (parseError) {
                    console.log('  ‚ùå Erro ao analisar dados do localStorage');
                    this.testResults.persistence.parseError = true;
                }
            }
            
        } catch (error) {
            console.error('  ‚ùå Erro no teste de persist√™ncia:', error);
            this.testResults.persistence.error = error.message;
        }
    }
    
    generateReport() {
        console.log('üìã === RELAT√ìRIO FINAL DOS TESTES ===');
        
        const allPassed = this.checkAllTestsPassed();
        
        console.log(`üéØ Status Geral: ${allPassed ? '‚úÖ TODOS OS TESTES PASSARAM' : '‚ö†Ô∏è ALGUNS TESTES FALHARAM'}`);
        console.log('');
        
        // Depend√™ncias
        console.log('üì¶ Depend√™ncias:');
        for (const [name, result] of Object.entries(this.testResults.dependencies || {})) {
            console.log(`  ${result ? '‚úÖ' : '‚ùå'} ${name}`);
        }
        console.log('');
        
        // Inicializa√ß√£o
        console.log('üîß Inicializa√ß√£o:');
        const init = this.testResults.initialization || {};
        console.log(`  ${!init.timeout ? '‚úÖ' : '‚ùå'} Tempo limite: ${!init.timeout ? 'OK' : 'TIMEOUT'}`);
        console.log(`  ${init.sqliteManager ? '‚úÖ' : '‚ùå'} SQLiteManager: ${init.sqliteManager ? 'OK' : 'FALHOU'}`);
        console.log(`  ${init.database ? '‚úÖ' : '‚ùå'} Database: ${init.database ? 'OK' : 'FALHOU'}`);
        console.log(`  ${init.readyFlag ? '‚úÖ' : '‚ùå'} Ready Flag: ${init.readyFlag ? 'OK' : 'FALHOU'}`);
        console.log('');
        
        // Recomenda√ß√µes
        this.generateRecommendations();
        
        // Salvar relat√≥rio
        this.saveReport();
    }
    
    checkAllTestsPassed() {
        const deps = this.testResults.dependencies || {};
        const init = this.testResults.initialization || {};
        
        const criticalTests = [
            ...Object.values(deps),
            !init.timeout,
            init.sqliteManager,
            init.database,
            init.readyFlag
        ];
        
        return criticalTests.every(test => test === true);
    }
    
    generateRecommendations() {
        console.log('üí° Recomenda√ß√µes:');
        
        const deps = this.testResults.dependencies || {};
        const init = this.testResults.initialization || {};
        
        if (!deps['SQL.js']) {
            console.log('  üîß Verificar carregamento da biblioteca SQL.js');
        }
        
        if (!deps['SQLiteManager class']) {
            console.log('  üîß Verificar se sqlite-manager.js est√° carregando');
        }
        
        if (init.timeout) {
            console.log('  üîß Verificar conex√£o de internet ou CDN do SQL.js');
        }
        
        if (!init.database) {
            console.log('  üîß Verificar inicializa√ß√£o do banco SQLite');
        }
        
        const allGood = this.checkAllTestsPassed();
        if (allGood) {
            console.log('  üéâ Sistema funcionando perfeitamente!');
            console.log('  ‚úÖ SQLite pronto para receber atualiza√ß√µes de produtos');
            console.log('  ‚úÖ Persist√™ncia garantida ap√≥s limpeza de cache');
        }
    }
    
    saveReport() {
        const report = {
            timestamp: new Date().toISOString(),
            results: this.testResults,
            summary: {
                allPassed: this.checkAllTestsPassed(),
                criticalIssues: this.identifyCriticalIssues()
            }
        };
        
        localStorage.setItem('sqliteTestReport', JSON.stringify(report));
        console.log('üíæ Relat√≥rio salvo no localStorage como "sqliteTestReport"');
    }
    
    identifyCriticalIssues() {
        const issues = [];
        const init = this.testResults.initialization || {};
        
        if (init.timeout) issues.push('Timeout na inicializa√ß√£o');
        if (!init.sqliteManager) issues.push('SQLiteManager n√£o criado');
        if (!init.database) issues.push('Database n√£o inicializado');
        if (!init.readyFlag) issues.push('Flag de pronto n√£o definida');
        
        return issues;
    }
}

// Inicializar testes
window.sqliteSystemTest = new SQLiteSystemTest();

console.log('üß™ Sistema de Teste SQLite carregado');
