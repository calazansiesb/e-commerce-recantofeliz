// Script para garantir fonte de dados √∫nica em todo o sistema
console.log('üîß Inicializando fonte de dados √∫nica...');

(async function initializeUnifiedDataSource() {
    try {
        // 1. Verificar se h√° dados em cache e se est√£o atualizados
        const cacheKey = 'granjaRecantoFelizData';
        const cacheData = localStorage.getItem(cacheKey);
        let needsUpdate = true;
        
        if (cacheData) {
            try {
                const parsed = JSON.parse(cacheData);
                // Verificar se os dados t√™m a marca de sincroniza√ß√£o for√ßada
                if (parsed.forceSync && parsed.syncedFromServer) {
                    console.log('‚úÖ Cache j√° sincronizado com produtos.json');
                    needsUpdate = false;
                }
            } catch (e) {
                console.log('‚ö†Ô∏è Cache corrompido, for√ßando atualiza√ß√£o');
            }
        }
        
        // 2. Se necess√°rio, carregar dados do arquivo JSON
        if (needsUpdate) {
            console.log('üîÑ Carregando dados atualizados do produtos.json...');
            
            try {
                const response = await fetch('data/produtos.json', { 
                    cache: 'no-store',
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    }
                });
                
                if (response.ok) {
                    const jsonData = await response.json();
                    
                    // Validar estrutura dos dados
                    if (jsonData.products && Array.isArray(jsonData.products)) {
                        const syncData = {
                            products: jsonData.products,
                            lastUpdate: new Date().toISOString(),
                            syncedFromServer: true,
                            forceSync: true,
                            version: jsonData.version || '1.0'
                        };
                        
                        localStorage.setItem(cacheKey, JSON.stringify(syncData));
                        console.log(`‚úÖ ${jsonData.products.length} produtos sincronizados`);
                        
                        // Verificar alguns produtos para confirmar pre√ßos
                        const firstProduct = jsonData.products[0];
                        if (firstProduct) {
                            console.log(`üìä Primeiro produto: ${firstProduct.name} - R$ ${firstProduct.price}`);
                        }
                        
                        return jsonData.products;
                    } else {
                        throw new Error('Formato inv√°lido no arquivo produtos.json');
                    }
                } else {
                    throw new Error(`Erro HTTP: ${response.status}`);
                }
            } catch (fetchError) {
                console.error('‚ùå Erro ao carregar produtos.json:', fetchError);
                
                // Fallback: usar dados padr√£o se dispon√≠vel
                if (window.DataManager) {
                    const manager = new DataManager();
                    console.log('üîÑ Usando dados padr√£o como fallback');
                    return manager.defaultProducts;
                }
            }
        } else {
            // Retornar dados do cache
            const parsed = JSON.parse(cacheData);
            console.log(`‚úÖ Usando dados do cache: ${parsed.products.length} produtos`);
            return parsed.products;
        }
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o da fonte de dados:', error);
        return [];
    }
})();

// Fun√ß√£o global para verificar consist√™ncia de dados
window.verifyDataConsistency = async function() {
    try {
        const localData = localStorage.getItem('granjaRecantoFelizData');
        const response = await fetch('data/produtos.json', { cache: 'no-store' });
        
        if (response.ok) {
            const jsonData = await response.json();
            
            console.log('üîç VERIFICA√á√ÉO DE CONSIST√äNCIA:');
            console.log('Cache:', localData ? JSON.parse(localData).products?.length : 'vazio');
            console.log('JSON:', jsonData.products?.length);
            
            if (localData) {
                const cacheProducts = JSON.parse(localData).products;
                const firstCacheProduct = cacheProducts[0];
                const firstJsonProduct = jsonData.products[0];
                
                console.log('Pre√ßo no cache:', firstCacheProduct?.price);
                console.log('Pre√ßo no JSON:', firstJsonProduct?.price);
                
                if (firstCacheProduct?.price !== firstJsonProduct?.price) {
                    console.warn('‚ö†Ô∏è INCONSIST√äNCIA DETECTADA! Pre√ßos diferentes entre cache e JSON');
                    return false;
                }
            }
            
            console.log('‚úÖ Dados consistentes');
            return true;
        }
    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o:', error);
        return false;
    }
};

// Disponibilizar globalmente
window.unifiedDataSource = {
    initialized: true,
    timestamp: new Date().toISOString()
};
