/**
 * Script de Diagn√≥stico Urgente - Erro "Erro ao carregar produtos"
 * 
 * Este script identifica e corrige o problema de carregamento de produtos no admin.
 */

console.log('üö® === DIAGN√ìSTICO URGENTE - ERRO CARREGAR PRODUTOS ===');

async function diagnoseProductLoadingError() {
    console.log('üîç Iniciando diagn√≥stico detalhado...');
    
    // 1. Verificar localStorage
    console.log('\nüìã 1. VERIFICANDO LOCALSTORAGE:');
    const storageData = localStorage.getItem('granjaRecantoFelizData');
    if (storageData) {
        try {
            const parsed = JSON.parse(storageData);
            console.log('‚úÖ localStorage existe');
            console.log('üìä Produtos no localStorage:', parsed.products?.length || 0);
            if (parsed.products?.length > 0) {
                console.log('üí∞ Exemplo produto:', parsed.products[0]);
            }
        } catch (error) {
            console.error('‚ùå Erro ao analisar localStorage:', error);
        }
    } else {
        console.log('‚ùå localStorage vazio ou n√£o existe');
    }
    
    // 2. Verificar DataManager
    console.log('\nüìã 2. VERIFICANDO DATAMANAGER:');
    if (window.dataManager) {
        try {
            const dmProducts = window.dataManager.getProducts();
            console.log('‚úÖ DataManager existe');
            console.log('üìä Produtos no DataManager:', dmProducts?.length || 0);
            if (dmProducts?.length > 0) {
                console.log('üí∞ Exemplo produto:', dmProducts[0]);
            }
        } catch (error) {
            console.error('‚ùå Erro no DataManager:', error);
        }
    } else {
        console.log('‚ùå DataManager n√£o encontrado');
    }
    
    // 3. Verificar SQLiteManager
    console.log('\nüìã 3. VERIFICANDO SQLITEMANAGER:');
    if (window.sqliteManager) {
        console.log('‚úÖ SQLiteManager existe');
        console.log('üîó DB conectado:', !!window.sqliteManager.db);
        
        if (window.sqliteManager.db) {
            try {
                const sqlProducts = await window.sqliteManager.getProducts();
                console.log('üìä Produtos no SQLite:', sqlProducts?.length || 0);
                if (sqlProducts?.length > 0) {
                    console.log('üí∞ Exemplo produto:', sqlProducts[0]);
                }
            } catch (error) {
                console.error('‚ùå Erro no SQLiteManager:', error);
            }
        }
    } else {
        console.log('‚ùå SQLiteManager n√£o encontrado');
    }
    
    // 4. Verificar DatabaseManager
    console.log('\nüìã 4. VERIFICANDO DATABASEMANAGER:');
    if (window.dbManager) {
        console.log('‚úÖ DatabaseManager existe');
        console.log('üîó Inicializado:', window.dbManager.isInitialized);
        
        if (window.dbManager.isInitialized) {
            try {
                const dbProducts = await window.dbManager.getProducts();
                console.log('üìä Produtos no DatabaseManager:', dbProducts?.length || 0);
                if (dbProducts?.length > 0) {
                    console.log('üí∞ Exemplo produto:', dbProducts[0]);
                }
            } catch (error) {
                console.error('‚ùå Erro no DatabaseManager:', error);
            }
        }
    } else {
        console.log('‚ùå DatabaseManager n√£o encontrado');
    }
    
    console.log('\nüö® === FIM DO DIAGN√ìSTICO ===');
}

async function forceCreateTestData() {
    console.log('üîß Criando dados de teste para resolver o problema...');
    
    const testProducts = [
        {
            id: 1,
            name: 'Ovos Caipira',
            category: 'ovos',
            price: 8.50,
            stock: 50,
            description: 'Ovos frescos de galinhas criadas soltas',
            slogan: 'Direto do galinheiro para sua mesa',
            image: 'imagens/produtos/1/1.png',
            images: ['imagens/produtos/1/1.png'],
            active: true
        },
        {
            id: 2,
            name: 'Adubo Org√¢nico',
            category: 'fertilizantes',
            price: 15.00,
            stock: 30,
            description: 'Adubo natural de galinha poedeira',
            slogan: 'Para suas plantas crescerem saud√°veis',
            image: 'imagens/produtos/2/1.png',
            images: ['imagens/produtos/2/1.png'],
            active: true
        }
    ];
    
    // Salvar no localStorage
    const data = {
        products: testProducts,
        lastUpdate: new Date().toISOString()
    };
    
    localStorage.setItem('granjaRecantoFelizData', JSON.stringify(data));
    console.log('‚úÖ Dados de teste salvos no localStorage');
    
    // Recriar DataManager se necess√°rio
    if (!window.dataManager) {
        try {
            window.dataManager = new DataManager();
            console.log('‚úÖ DataManager recriado');
        } catch (error) {
            console.error('‚ùå Erro ao recriar DataManager:', error);
        }
    }
    
    return testProducts;
}

async function fixProductLoadingIssue() {
    console.log('üõ†Ô∏è INICIANDO CORRE√á√ÉO DO PROBLEMA...');
    
    // Executar diagn√≥stico
    await diagnoseProductLoadingError();
    
    // Verificar se h√° dados em algum lugar
    let hasData = false;
    
    // Verificar localStorage
    const storageData = localStorage.getItem('granjaRecantoFelizData');
    if (storageData) {
        try {
            const parsed = JSON.parse(storageData);
            if (parsed.products && parsed.products.length > 0) {
                hasData = true;
                console.log('‚úÖ Dados encontrados no localStorage');
            }
        } catch (error) {
            console.error('‚ùå Erro no localStorage:', error);
        }
    }
    
    // Se n√£o h√° dados, criar dados de teste
    if (!hasData) {
        console.log('‚ö†Ô∏è Nenhum dado encontrado. Criando dados de teste...');
        await forceCreateTestData();
    }
    
    // For√ßar recarregamento da tabela
    if (typeof loadProductsTable === 'function') {
        console.log('üîÑ Recarregando tabela de produtos...');
        try {
            await loadProductsTable();
            console.log('‚úÖ Tabela recarregada com sucesso');
        } catch (error) {
            console.error('‚ùå Erro ao recarregar tabela:', error);
        }
    }
    
    console.log('üõ†Ô∏è CORRE√á√ÉO CONCLU√çDA');
}

// Executar corre√ß√£o automaticamente
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(async () => {
        await fixProductLoadingIssue();
        
        // Adicionar bot√£o de corre√ß√£o na interface
        const fixButton = document.createElement('button');
        fixButton.textContent = 'üõ†Ô∏è Corrigir Dados';
        fixButton.className = 'bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition';
        fixButton.onclick = fixProductLoadingIssue;
        fixButton.style.cssText = `
            position: fixed;
            bottom: 70px;
            right: 20px;
            z-index: 9999;
        `;
        document.body.appendChild(fixButton);
    }, 2000);
});

// Exportar fun√ß√µes para uso manual
window.diagnoseProductLoadingError = diagnoseProductLoadingError;
window.forceCreateTestData = forceCreateTestData;
window.fixProductLoadingIssue = fixProductLoadingIssue;

console.log('üõ†Ô∏è Script de corre√ß√£o carregado');
