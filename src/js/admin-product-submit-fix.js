/**
 * Corre√ß√£o da fun√ß√£o handleProductSubmit
 * 
 * Esta fun√ß√£o substitui a fun√ß√£o problem√°tica no admin.js
 * Use este c√≥digo para sobrescrever a fun√ß√£o ap√≥s o carregamento
 */

async function handleProductSubmit(e) {
    e.preventDefault();
    
    try {
        console.log('üíæ Salvando produto...');
        
        // Validar campos obrigat√≥rios
        const productName = document.getElementById('product-name').value.trim();
        const productPrice = document.getElementById('product-price').value;
        const productStock = document.getElementById('product-stock').value;
        const productCategory = document.getElementById('product-category').value;
        
        if (!productName) {
            showNotification('Nome do produto √© obrigat√≥rio!', 'error');
            return;
        }
        
        if (!productPrice || parseFloat(productPrice) <= 0) {
            showNotification('Pre√ßo deve ser maior que zero!', 'error');
            return;
        }
        
        if (!productStock || parseInt(productStock) < 0) {
            showNotification('Estoque deve ser um n√∫mero v√°lido!', 'error');
            return;
        }
        
        if (!productCategory) {
            showNotification('Categoria √© obrigat√≥ria!', 'error');
            return;
        }
        
        const productId = document.getElementById('product-id').value;
        const productData = {
            name: productName,
            slogan: document.getElementById('product-slogan').value.trim(),
            description: document.getElementById('product-description').value.trim(),
            price: parseFloat(productPrice),
            stock: parseInt(productStock),
            category: productCategory,
            active: true
        };
        
        // Verificar se √© produto de parceiro
        const productType = document.getElementById('product-type').value;
        if (productType === 'parceiro') {
            const partnerName = document.getElementById('partner-name').value.trim();
            if (!partnerName) {
                showNotification('Nome do parceiro √© obrigat√≥rio!', 'error');
                return;
            }
            
            productData.partner = {
                name: partnerName,
                producer: document.getElementById('partner-producer').value.trim(),
                location: document.getElementById('partner-location').value.trim(),
                description: document.getElementById('partner-description').value.trim()
            };
        }
        
        // === SISTEMA ROBUSTO DE PERSIST√äNCIA ===
        console.log('üîÑ Iniciando salvamento com sistema robusto...');
        
        // 1. Aguardar SQLite estar pronto (com timeout para n√£o travar)
        if (window.sqliteRobustInitializer && !window.sqliteReady) {
            try {
                console.log('‚è≥ Aguardando SQLite inicializar...');
                await Promise.race([
                    window.sqliteRobustInitializer.waitForReady(),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))
                ]);
                console.log('‚úÖ SQLite est√° pronto para uso');
            } catch (timeout) {
                console.log('‚ö†Ô∏è SQLite n√£o ficou pronto em 3s - continuando com localStorage');
            }
        }
        
        // 2. Usar DataManager (que agora integra automaticamente com SQLite)
        if (!window.dataManager) {
            console.error('‚ùå DataManager n√£o dispon√≠vel!');
            showNotification('Erro: Sistema de dados n√£o dispon√≠vel!', 'error');
            return;
        }
        
        let success = false;
        
        try {
            console.log('üíæ Salvando via DataManager (com integra√ß√£o SQLite)...');
            
            if (productId) {
                // Atualizar produto existente
                console.log(`üîÑ Atualizando produto ID ${productId}...`);
                success = await window.dataManager.updateProduct(parseInt(productId), productData);
            } else {
                // Adicionar novo produto
                console.log('‚ûï Adicionando novo produto...');
                success = await window.dataManager.addProduct(productData);
            }
            
            if (success) {
                console.log('‚úÖ Produto salvo com sucesso!');
                
                // Log do status de integra√ß√£o
                if (window.sqliteReady && window.sqliteManager) {
                    console.log('üóÑÔ∏è SQLite: ‚úÖ Integrado');
                    try {
                        const products = window.sqliteManager.getProducts();
                        console.log(`üìä SQLite agora tem ${products.length} produtos`);
                    } catch (checkError) {
                        console.warn('‚ö†Ô∏è Erro ao verificar SQLite:', checkError);
                    }
                } else if (window.sqliteFallbackMode) {
                    console.log('üîÑ SQLite: ‚ö†Ô∏è Modo fallback ativo');
                } else {
                    console.log('üîÑ SQLite: ‚è≥ Ainda inicializando');
                }
                
                // Notificar sucesso
                if (productId) {
                    showNotification('Produto atualizado com sucesso!', 'success');
                } else {
                    showNotification('Produto adicionado com sucesso!', 'success');
                }
                
                // Atualizar interface
                await showSection('produtos');
                updateDashboardStats();
                
                // Fechar modal
                if (typeof closeProductModal === 'function') {
                    closeProductModal();
                }
                
            } else {
                console.error('‚ùå Falha ao salvar produto');
                showNotification('Erro ao salvar produto! Verifique os dados.', 'error');
            }
            
        } catch (dataManagerError) {
            console.error('‚ùå Erro no DataManager:', dataManagerError);
            showNotification('Erro interno ao salvar produto!', 'error');
        }
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico ao salvar produto:', error);
        showNotification('Erro cr√≠tico! Verifique o console para mais detalhes.', 'error');
    }
}

// Sobrescrever a fun√ß√£o global
window.handleProductSubmit = handleProductSubmit;

console.log('üîß Fun√ß√£o handleProductSubmit corrigida e aplicada');
